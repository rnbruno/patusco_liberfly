# class Company extends Model
# {
#     use HasFactory;
 
#     protected $fillable = ['name', 'email', 'address', 'website'];
# }


# Next, we create a Controller, with a few flags to generate exactly what we need:

# php artisan make:controller Api/CompanyController --resource --api --model=Company


# Personally, I like to use API Resources to transform the data. Although in this project, we won't make any transformations, I still have a habit of generating them:

# php artisan make:resource CompanyResource


# And, inside of app/Http/Resources/CompanyResource.php, there's this default code:

# class CompanyResource extends JsonResource
# {
#     public function toArray($request)
#     {
#         return parent::toArray($request);
#     }
# }


# Next, for validation, we generate a FormRequest class:

# php artisan make:request CompanyRequest

# In this case, I will re-use the same validation rules for both store/update functions, so this is the content of app/Http/Requests/CompanyRequest.php:

# class CompanyRequest extends FormRequest
# {
#     public function authorize()
#     {
#         return true;
#     }
 
#     public function rules()
#     {
#         return [
#             'name' => ['required', 'string'],
#             'email' => ['required', 'email'],
#             'address' => ['nullable', 'string'],
#             'website' => ['nullable', 'url'],
#         ];
#     }
# }
# git rm -r --cached .

# dd($query->toSql());

# $sql = $query->toSql();

# // Obter os valores dos bindings
# $bindings = $query->getBindings();

# // Substituir os valores dos bindings na consulta SQL
# $fullSql = Str::replaceArray('?', $bindings, $sql);

# // Exibir a consulta SQL completa
# dd($fullSql);
# Route::apiResource('acesso12', AcessoController::class)->names([
#     'index' => 'acesso12.index'
# ]);

# o acesso12 é o método da função AcessoController


    root@5e85ac6aff2c:/var/www# php artisan route:list
